
#To list properties for 'reservation-service' stored in git config-repo folder:
http://localhost:8888/reservation-service/master

Microproxy (Zuul) 
http://localhost:9999/[reservation-service]/reservations - simply proxies to :8085/reservations
reservation-service context in this case ID of the service that was registered 
in the registry service (Eureka, Zookeeper, etc)

API gateway access endpoint specified as follows:
http://localhost:9999/reservations/names


#Make sure to include the following in app properties to expose actuator endpoints
management.endpoints.web.exposure.include=*

#to refresh props
curl -X POST http://localhost:8085/actuator/refresh

# do not forget to rename default application.properties to bootstrap.properties when using remote config service

#info
#https://spring.io/blog/2015/01/20/microservice-registration-and-discovery-with-spring-cloud-and-netflix-s-eureka
#by Josh Long
#https://www.youtube.com/watch?v=ZyK5QrKCbwM

#by Will Tran
https://www.youtube.com/watch?v=USMl2GNg2r0

reservation-client
----------------
Eureka Discovery
Config Client
Hystrix - for circuit breaker
Zuul - for micro proxy
Stream Redis - for messaging microservices
Zipkin - for distributed tracesing

There are two types of "edge services":
1) Micro-proxy - blindly forwards requests behind load balancer
2) API Gateway - performs API and protocol translations

Edge service should stood up through DNS.
Smart phone or client devices cannot use Eureka for discovery. They still need to use DNS.
Devices will send request to edge service, which will mediate the request inside and 
forward it to the right service(s).
It is useful patter to let your devices to talk to one external serice only, where edge 
service will transform device requests as a middle man.

Micro-proxy (e.g. Zuul from Netflix built on RxJava) - typically is good for HTML5 apps where the connection has to stay on ceraint host:port
All it does just blindly forwards request from the Edge service to the service we have referenced it.

*****************************
List<String> x = new ArrayList<>(); // Generic type String will be removed at run-time: List x = new ArrayList();
List<String> x2 = new ArrayList<String>(){/*anonymous sub-class*/}; // now sting is a part of parent-chid hierarchy. 
//Generic type String will stay at run-time now. . It extends the list of String now, not the list of objects
// We can capture this generic type information using Type-Token pattern.
In Spring it is ParametrizedTypeReference<T>


Ribbon is the component that does load balancing in the registry service. It is programmable.
By default it uses round robin.
It can support session aware connection, sticky session aware, or whatever aware 
load balancing algorithms.

Client ap with Hystix (Circuit Breakers) will control the route to the service. If load balancer can return a service instance it is goood, but when there are no instances left, istead of failing
it will trigger circuit breaker fallback function that will return at least something.

ATTENTION: 
Distributed state synchronization - invites complexity.
Lazy architecture reaches for something easy such as Distributed Transactions.
The recomendation is to ignore simplicity at all cost.
Distributed transacation servers only to slowdown the agreagate system. 
They also not as guaranted as we migh think.

Instead it is better to use eventual consistency, such as message! If the service is down the message will be buffered and message will be delivered when service is up and running again.

Kafka, Redis, RabitMQ, etc

RabitMQ default port is 5671, console management 15672, guest:guest

Pay attention to submitting your application/json data via RequestBody - not RequestParam

Hystrix-dashboard - heartbeatsa from circuits, you can federate all streams from all circuits (see spring-turbine)
# manamgement console 
http://localhost:8010/hystrix
URL to monitor need to provide a strem of data (ping: )
http://localhost:9999/actuator/hystrix.stream


Distributed tracing is not a simple task for request coming through multiple services. 
To mitigate that we need to propagade UUID in our request continue to propagafe this UUID across all services.
spring-cloud-sleuth
zipkin is a specific implementation of the sleuth

Run zipkin from the docker container on local port 9422 whereas 9411 is internal Docker container port
docker run -d -p 9422:9411 openzipkin/zipkin
or via java
curl -sSL https://zipkin.io/quickstart.sh | bash -s
java -jar zipkin.jar
or from guthub
git clone https://github.com/openzipkin/zipkin
cd zipkin
./mvnw -DskipTests --also-make -pl zipkin-server clean install
java -jar ./zipkin-server/target/zipkin-server-*exec.jar

curl -X POST -d '{"reservationName": "Some name"}' --header "Content-Type: application/json" http://localhost:9999/reservations

# RestTemplate Ribbon aware instance
@Balanced @Bean for RestTemplate allows to use service-name as the address of the service.

with Eureka disabled:
myservice.ribbon.eureka.enabled=false
Use @RibbonClient(name = "myservice") in the code and specify list of services in app .properties file as follows:
myservice.ribbon.listOfServers=localhost:9000,localhost:9100
and then use
restTemplate.getForEntity("http://myservice/api/v1/123", String.class);

@FeignClient("bookmark-service")
interface BookmarkClient {

    @RequestMapping(method = RequestMethod.GET, value = "/{userId}/bookmarks")
    List<Bookmark> getBookmarks(@PathVariable("userId") String userId);
}

Use Nginx as a front end for accesing edge services. Read this
https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture/

# By Will Tran
https://www.youtube.com/watch?v=USMl2GNg2r0

https://12factor.net/
https://spring.io/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring
https://docs.cloudfoundry.org/concepts/overview.html

- configuration management
- service discovery
- circuit breakers
- intelligent routing
- micro-proxy
- control bus
- one-time tokens
- global locks
- leadership election
- distributed sessions
- cluster state

git config credential.helper store
SAML - Security Assertion Markup Language
OAuth2 + OpenID connect is good approach
OAuth2 - delegeted authorization


wget http://www-us.apache.org/dist/tomcat/tomcat-9/v9.0.11/bin/apache-tomcat-9.0.11.tar.gz

<<<<<<< HEAD
*** Spring Cloud Security
To have proper security use: OAuth2 + OpenID Connect (Authorization + Authentication)
See: http://oauth.net/articles/authentication

OAuth2 - is Delegated Authorization protocol
 via token, which cna be obtained from teh following OAuth2 grant types: 
- Authorization code (from Web applicatioon - this is the most secure)
- Resource Owner Password Grant (use own login page instead of using login page from authorization server OR for non-browser clients)
- Implicit grant (typically used with single page javascript app and with really no server backend)
- Client Credentials (client app or teh machine is operating itself - not on the behalf of the user, E.g. some back-end processes)

OpenID connect is Delegated Authentication protocol (it is not an Authentication itself), which is built on the top of OAuth2
- Conveys user identity via JWT (Json Web Token)
- Standard approach for obtaining and veryfing ID tokens for all for all 4 grants specified above under OAuth2
In short: the user is authorizing specific app to perform specific actions on behalf of this user.
It can also convey email address, phone, address, etc

To authenticate you can use internal DB, another identity provides (SAML-security assertion markup language, LDAP, etc), 
multi-factor authentication (e.g. Duo, biometrics, GPS, etc)

How to get tokens (the most secure)?
"Scopes" are like permissions or roles
Token says this user can do these particualr things


Auth server first provides to one-time access token that is used by Web app to get ID token.
Then Auth server validates on-time code coming from Web app and returns access token (random string) and ID token (signed JWT - json web token)
Web app verifies ID token and then starts authentication session saving the the obtained access token.
When it's over the user will be authenticated both with Auth server and with Web app.
Web app will submit data (e.g. new order) to REST API service with the access token previously stored in the session. It also presnts in teh authotization header.

UAA server - User Account and Authentication Server
Spring security OAuth2 is based on uses UUA. 
Spring Cloud Security = Spring Boot + Spring Security OAuth2
It produces JWT with scopes (permissions/roles) and identity
--- https://github.com/william-tran/microservice-security

 



UAA server docker image
docker run --name uaa -e UAA_DB_HOST=databasehost -e UAA_DB_PASSWORD=strongpassword -d bhits/uaa:latest
docker run --name uaa <configuration> -d bhits/uaa:latest
docker run -d --link uaa-db:db -v /tmp/uaa:/uaa:rw hortonworks/cloudbreak-uaa:2.7.1
# open shall with running container
docker exec -it 10854a3284db  sh


Canary deployment - The idea is to first deploy the change to a small subset of servers, test it, and then roll the change out to the rest of the servers


https://kubernetes.io/docs/setup/learning-environment/minikube/

# start 
minikube start
# now we can interact via kubectl

# deploy our image
kubectl run hello-minikube --image=k8s.gcr.io/echoserver:1.10 --port=8080


#expose as a service
kubectl expose deployment hello-minikube --type=NodePort

# check that pod is up and running
kubectl get pod

# get URL of the exposed service
minikube service hello-minikube --url


#-------------------------------
# to delete our service
kubectl delete services hello-minikube

# to delete deployment
kubectl delete deployment hello-minikube

# stop minikube cluster
minikube stop

# delete inikube cluster
minikube delete

#-------------------------------
# access minikube shell
minukube ssh
or 
ssh "IPaddress of minikube" -l docker (pass: tcuser)


